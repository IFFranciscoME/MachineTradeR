panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/10),4),
labels = comma)
Grafica0
Titulo <- paste(paste("Precios: ", OA_In, sep =""), "| Periodicidad: ", GranCodigo, sep = " ")
Historical_BackTest$Close <- as.numeric(Historical_BackTest$Close)
Grafica0 <- ggplot(data = Historical_BackTest) +
geom_line(aes(x = Historical_BackTest$Close.TimeStamp, y = Historical_BackTest$Close),
size=1.5) + labs(title = Titulo, x = "Fechas", y = OA_In) +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/12),4),
labels = comma)
Grafica0
Titulo <- paste(paste("Precios: ", OA_In, sep =""), "| Periodicidad: ", GranCodigo, sep = " ")
Historical_BackTest$Close <- as.numeric(Historical_BackTest$Close)
Grafica0 <- ggplot(data = Historical_BackTest) +
geom_line(aes(x = Historical_BackTest$Close.TimeStamp, y = Historical_BackTest$Close),
size=1.5) + labs(title = Titulo, x = "Fechas", y = OA_In) +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/10),4),
labels = comma)
Grafica0
Grafica1
Titulo <- paste(paste("Precios: ", OA_In, sep =""), "| Periodicidad: ", GranCodigo, sep = " ")
Historical_BackTest$Close <- as.numeric(Historical_BackTest$Close)
Grafica0 <- ggplot(data = Historical_BackTest) +
geom_line(aes(x = Historical_BackTest$Close.TimeStamp, y = Historical_BackTest$Close),
size=1.5) + labs(title = Titulo, x = "Fechas", y = OA_In) +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/10),4),
labels = comma)
Grafica0
Indizador_Profit_Acum <- which(substr(colnames(Historical_BackTest),1,10) == "ProfitAcum")
Historical_Data <- data.frame(Historical_BackTest$Close.TimeStamp)
colnames(Historical_Data)[1] <- "Close.TimeStamp"
Historical_Data <- cbind(Historical_Data,Historical_BackTest[,Indizador_Profit_Acum])
Historical_Data <- melt(Historical_Data, id.vars = "Close.TimeStamp")
Titulo <- "Historico de Profit Acumulada"
Grafica1 <- ggplot(data = Historical_Data) +
geom_line(aes(x = Close.TimeStamp, y = value, colour = variable), size = 1.25)  +
labs(title = Titulo, x = "Fechas", y = "Pips Acumulados")  +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_Data[,3]),6),
round(max(Historical_Data[,3]),6),
(round(max(Historical_Data[,3]),6) - round(min(Historical_Data[,3]),6))/10),2),
labels = comma)
Grafica1
# Chunk 1: Ini0
rm(list=ls())         # Remove all objects
cat("\014")           # Clear Console
# -- ----------------------------------------------------------------------------------------- -- #
# -- Inicializador general de sistema ------------------------------------------------ ETAPA 0 -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Remover Objetos de Environment
rm(list=ls())
# -- ------------------------------------------------------------------------------- ETAPA 0.0 -- #
# -- --------------------------------------------------------------------- Paquetes a utilizar -- #
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","jsonlite","lubridate",
"moments","matrixStats", "plyr","reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","zoo")
# -- Instalar y/o cargar paquetes necesarios-
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- ------------------------------------------------------------------------------- ETAPA 0.1 -- #
# -- ------------------------------------------------- Variables de etorno y objetos generales -- #
# -- Huso horario
Sys.setenv(tz="America/Monterrey")
options(tz="America/Monterrey")
Sys.setenv(TZ="America/Monterrey")
options(TZ="America/Monterrey")
# -- Objeto para guardar BackTest con distintos parametros de ciclo
BackTest <- data.frame(matrix(nrow=1, ncol=1, data=0))
colnames(BackTest)[1] <- "Corrida"
# -- Objeto para guardar Historico completo de resultados
Historical_BackTest <- data.frame(matrix(nrow=1, ncol=7, data=0))
colnames(Historical_BackTest) <- c("Inst","Open.TimeStamp", "Close.TimeStamp","Close",
"Pre.Side","Actual.Side", "ExitoModelo")
# -- Objeto que almacena valores completos de datos historicos
Valores <- list(list())
# -- Scripts de apoyo -------------------------------------------------------------- ETAPA 0.2 -- #
# -- ------------------------------------------------------------------------ Scripts de apoyo -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
RTradingPalAPI <- paste(RawGitHub,"RTradingPalAPI/master/RTradingPalAPI.R",sep="")
downloader::source_url(RTradingPalAPI,prompt=FALSE,quiet=TRUE)
DataProcessor <- paste(RawGitHub,"DataProcessor/master/DataProcessor.R",sep="")
downloader::source_url(DataProcessor,prompt=FALSE,quiet=TRUE)
DataVisualization <- paste(RawGitHub,"DataVisualization/master/DataVisualization.R",sep="")
downloader::source_url(DataVisualization,prompt=FALSE,quiet=TRUE)
# -- ------------------------------------------------------------------------------- ETAPA 0.3 -- #
# -- ---------------------------------------------- Carga, Tratamiento y Preparacion de  Datos -- #
# -- Instrumento a utilizar para backtest de codigo
Instrumentos <- c('NZD_USD', 'AUD_USD', 'USD_CHF', 'USD_JPY',
'GBP_JPY', 'EUR_JPY', 'AUD_JPY', 'EUR_GBP',
'XAU_USD', 'XAG_USD', 'XPT_USD', 'XCU_USD',
'WTICO_USD', 'BCO_USD', 'NATGAS_USD')
# Chunk 2: Ini1
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Parametros de Optimizar --------------------------------------------------------- ETAPA 1 -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Historicos a utilizar en modelo
VTam_H1 <- c(24,144,288,576)
VTam_H4 <- c(6,36,78,132)
VTam_H8 <- c(3,18,39,66)
VTam_D  <- c(22,44,66,88)
VTex    <- c("Ultimo Dia Bursatil","Ultima Semana Bursatil",
"Ultima Quincena Bursatil","Ultimo Mes Bursatil")
# -- Tamano de ventana segun TSCrossValidation
Tam_Ventana <- VTam_D[4]
Raz_Ventana <- VTex[4]
# -- Datos variables para BackTest
InstCodigo <- Instrumentos[3]
GranCodigo <- "D"
Fecha_Inicial <- "2016-02-01"
Fecha_Final   <- "2016-11-01"
Dinamica_Algo <- 0 # 0: Directo, 1: Inverso
# -- Cargar Historicos de .RData VERSION MAQUIA LOCAL (ENVY)
DirBase <- "C:/TradingPal/BitBucket/A01-BoxJenkins/BackTests/"
DatBase <- paste(DirBase,".RData" , sep=InstCodigo)
load(DatBase)
# -- Cargar Historicos de .RData VERSION MAQUINA VIRTUAL (AWS)
# DirBase <- "~/a01-boxjenkins/BackTests/"
# DatBase <- paste(DirBase,".RData" , sep=InstCodigo)
# load(DatBase)
# -- Parametros para simulacion de trading, DrawDown y DrawUp
MultPip <- 100
OA_At <- "practice"
OA_Ai <- 1742531
OA_Ak <- "ada4a61b0d5bc0e5939365e01450b614-4121f84f01ad78942c46fc3ac777baa6"
OA_Da <- 17
OA_Ta <- "America/Mexico_City"
OA_In <- InstCodigo
OA_Gn <- "M5"
# -- Seleccionar objeto segun periodicidad de precios
PrecCodigo <- paste(InstCodigo, GranCodigo, sep ="_")
DatosHistPrecios <- get(PrecCodigo)
DatosHistPrecios <- DatosHistPrecios[
max(which(as.Date(DatosHistPrecios$TimeStamp) == Fecha_Inicial)):
max(which(as.Date(DatosHistPrecios$TimeStamp) == Fecha_Final)),]
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #
# Chunk 4: Apoyo
load("C:/Trabajo/Repositorios/BitBucket/A01_BoxJenkins_Reporte/Offline.RData")
# Chunk 5: G0_HistoricoPrecios
Titulo <- paste(paste("Precios: ", OA_In, sep =""), "| Periodicidad: ", GranCodigo, sep = " ")
Historical_BackTest$Close <- as.numeric(Historical_BackTest$Close)
Grafica0 <- ggplot(data = Historical_BackTest) +
geom_line(aes(x = Historical_BackTest$Close.TimeStamp, y = Historical_BackTest$Close),
size=1.5) + labs(title = Titulo, x = "Fechas", y = OA_In) +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/10),4),
labels = comma)
Grafica0
# Chunk 6: Apoyo1
Indizador_Profit_Acum <- which(substr(colnames(Historical_BackTest),1,10) == "ProfitAcum")
Historical_Data <- data.frame(Historical_BackTest$Close.TimeStamp)
colnames(Historical_Data)[1] <- "Close.TimeStamp"
Historical_Data <- cbind(Historical_Data,Historical_BackTest[,Indizador_Profit_Acum])
Historical_Data <- melt(Historical_Data, id.vars = "Close.TimeStamp")
# Chunk 7: G1_ProfitAcumulada
Titulo <- "Historico de Profit Acumulada"
Grafica1 <- ggplot(data = Historical_Data) +
geom_line(aes(x = Close.TimeStamp, y = value, colour = variable), size = 1.25)  +
labs(title = Titulo, x = "Fechas", y = "Pips Acumulados")  +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_Data[,3]),6),
round(max(Historical_Data[,3]),6),
(round(max(Historical_Data[,3]),6) - round(min(Historical_Data[,3]),6))/10),2),
labels = comma)
Grafica1
# Chunk 8: G2_HistoricoProfits
Indizador_Profit_Acum <- which(substr(colnames(Historical_BackTest),1,10) == "ProfitAcum")
Historical_Data <- data.frame(Historical_BackTest$Close.TimeStamp)
colnames(Historical_Data)[1] <- "Close.TimeStamp"
Historical_Data <- cbind(Historical_Data,Historical_BackTest[,Indizador_Profit_Acum])
Mediciones_Trayectoria <- data.frame(matrix(nrow=k, ncol=7, data=0))
Mediciones_Trayectoria[,1] <- colnames(Historical_Data)[2:(k+1)]
colnames(Mediciones_Trayectoria) <- c("Trayectoria","Pips_Fin_Acum","Cta_Max_DD","Cta_Max_Plus",
"Gc_Pc","Trayectoria_DD","Trayectoria_DU")
# -- Criterios a medir para cada trayectoria
# -- Mayor numero de Pips Acumulados al final del periodo.
Mediciones_Trayectoria$Pips_Fin_Acum[1:length(Indizador_Profit_Acum)] <- as.numeric(
apply(X = Historical_Data, 2,
FUN = last)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Minusvalia general de la cuenta.
Mediciones_Trayectoria$Cta_Max_DD[1:length(Indizador_Profit_Acum)]  <- as.numeric(
apply(X = Historical_Data, 2,
FUN = min)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Plusvalia general de la cuenta.
Mediciones_Trayectoria$Cta_Max_Plus[1:length(Indizador_Profit_Acum)] <- as.numeric(
apply(X = Historical_Data, 2,
FUN = max)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Indice GcPc = Ganadoras Consecutivas / Perdedoras Consecutivas
for(i in 1:k) Mediciones_Trayectoria$Gc_Pc[i] <-
round(BackTest$Max_Pos_Consec[i]/BackTest$Max_Neg_Consec[i] ,2)
# -- Menor DrawDown en Pips durante todo el periodo =Indice Pc * StopLoss
for(i in 1:k) Mediciones_Trayectoria$Trayectoria_DD[i] <- BackTest$Max_Neg_Consec[i]*
BackTest$Stop_Loss[i]
# -- Menor DrawUp en Pips durante todo el periodo = Indice Gc * TakeProfit
for(i in 1:k) Mediciones_Trayectoria$Trayectoria_DU[i] <- BackTest$Max_Pos_Consec[i]*
BackTest$Take_Profit[i]
View(Mediciones_Trayectoria)
View(Historical_BackTest)
# Chunk 1: Ini0
rm(list=ls())         # Remove all objects
cat("\014")           # Clear Console
# -- ----------------------------------------------------------------------------------------- -- #
# -- Inicializador general de sistema ------------------------------------------------ ETAPA 0 -- #
# -- ----------------------------------------------------------------------------------------- -- #
# -- Remover Objetos de Environment
rm(list=ls())
# -- ------------------------------------------------------------------------------- ETAPA 0.0 -- #
# -- --------------------------------------------------------------------- Paquetes a utilizar -- #
pkg <- c("downloader","dplyr","fBasics","gridExtra","ggplot2","httr","jsonlite","lubridate",
"moments","matrixStats", "plyr","reshape2","RCurl", "stats",
"scales", "tseries","XML","xts","xlsx","zoo")
# -- Instalar y/o cargar paquetes necesarios-
inst <- pkg %in% installed.packages()
if(length(pkg[!inst]) > 0)
install.packages(pkg[!inst], repo='https://cran.cnr.Berkeley.edu/')
instpackages <- lapply(pkg, library, character.only=TRUE)
# -- ------------------------------------------------------------------------------- ETAPA 0.1 -- #
# -- ------------------------------------------------- Variables de etorno y objetos generales -- #
# -- Huso horario
Sys.setenv(tz="America/Monterrey")
options(tz="America/Monterrey")
Sys.setenv(TZ="America/Monterrey")
options(TZ="America/Monterrey")
# -- Objeto para guardar BackTest con distintos parametros de ciclo
BackTest <- data.frame(matrix(nrow=1, ncol=1, data=0))
colnames(BackTest)[1] <- "Corrida"
# -- Objeto para guardar Historico completo de resultados
Historical_BackTest <- data.frame(matrix(nrow=1, ncol=7, data=0))
colnames(Historical_BackTest) <- c("Inst","Open.TimeStamp", "Close.TimeStamp","Close",
"Pre.Side","Actual.Side", "ExitoModelo")
# -- Objeto que almacena valores completos de datos historicos
Valores <- list(list())
# -- Scripts de apoyo -------------------------------------------------------------- ETAPA 0.2 -- #
# -- ------------------------------------------------------------------------ Scripts de apoyo -- #
RawGitHub <- "https://raw.githubusercontent.com/IFFranciscoME/"
ROandaAPI <- paste(RawGitHub,"ROandaAPI/master/ROandaAPI.R",sep="")
downloader::source_url(ROandaAPI,prompt=FALSE,quiet=TRUE)
RTradingPalAPI <- paste(RawGitHub,"RTradingPalAPI/master/RTradingPalAPI.R",sep="")
downloader::source_url(RTradingPalAPI,prompt=FALSE,quiet=TRUE)
DataProcessor <- paste(RawGitHub,"DataProcessor/master/DataProcessor.R",sep="")
downloader::source_url(DataProcessor,prompt=FALSE,quiet=TRUE)
DataVisualization <- paste(RawGitHub,"DataVisualization/master/DataVisualization.R",sep="")
downloader::source_url(DataVisualization,prompt=FALSE,quiet=TRUE)
# -- ------------------------------------------------------------------------------- ETAPA 0.3 -- #
# -- ---------------------------------------------- Carga, Tratamiento y Preparacion de  Datos -- #
# -- Instrumento a utilizar para backtest de codigo
Instrumentos <- c('NZD_USD', 'AUD_USD', 'USD_CHF', 'USD_JPY',
'GBP_JPY', 'EUR_JPY', 'AUD_JPY', 'EUR_GBP',
'XAU_USD', 'XAG_USD', 'XPT_USD', 'XCU_USD',
'WTICO_USD', 'BCO_USD', 'NATGAS_USD')
# Chunk 4: Apoyo
load("C:/Trabajo/Repositorios/BitBucket/A01_BoxJenkins_Reporte/Offline.RData")
# Chunk 5: G0_HistoricoPrecios
Titulo <- paste(paste("Precios: ", OA_In, sep =""), "| Periodicidad: ", GranCodigo, sep = " ")
Historical_BackTest$Close <- as.numeric(Historical_BackTest$Close)
Grafica0 <- ggplot(data = Historical_BackTest) +
geom_line(aes(x = Historical_BackTest$Close.TimeStamp, y = Historical_BackTest$Close),
size=1.5) + labs(title = Titulo, x=NULL, y=NULL) +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.25,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1.25),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_BackTest$Close),4),
round(max(Historical_BackTest$Close),4),
(round(max(Historical_BackTest$Close),4) - round(min(Historical_BackTest$Close),4))/10),4),
labels = comma)
Grafica0
# Chunk 6: G0_HistoricoPrecios
# Chunk 7: Apoyo1
Indizador_Profit_Acum <- which(substr(colnames(Historical_BackTest),1,10) == "ProfitAcum")
Historical_Data <- data.frame(Historical_BackTest$Close.TimeStamp)
colnames(Historical_Data)[1] <- "Close.TimeStamp"
Historical_Data <- cbind(Historical_Data,Historical_BackTest[,Indizador_Profit_Acum])
Historical_Data <- melt(Historical_Data, id.vars = "Close.TimeStamp")
# Chunk 8: G2_ProfitAcumulada
Titulo <- "Historico de Profit Acumulada"
Grafica1 <- ggplot(data = Historical_Data) +
geom_line(aes(x = Close.TimeStamp, y = value, colour = variable), size = 1.25)  +
labs(title = Titulo, x = "Fechas", y = "Pips Acumulados")  +
theme(panel.background = element_rect(fill="white"),
panel.grid.minor.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.y = element_line(size = .55, color = "dark grey"),
panel.grid.major.x = NULL,
panel.grid.minor.x = NULL,
axis.text.x =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.text.y =element_text(colour = "black",size = 22, hjust =.5,vjust = 0),
axis.title.x=element_text(colour = "black",size = 24, hjust =.5,vjust = 0),
axis.title.y=element_text(colour = "black",size = 24, hjust =.5,vjust = 1),
panel.border = element_rect(linetype = 1, colour = "dark grey", fill = NA)) +
scale_x_datetime(date_breaks = "4 week",labels = date_format("%d/%m/%y")) +
scale_y_continuous(breaks = round(seq(
round(min(Historical_Data[,3]),6),
round(max(Historical_Data[,3]),6),
(round(max(Historical_Data[,3]),6) - round(min(Historical_Data[,3]),6))/10),2),
labels = comma)
Grafica1
# Chunk 9: G2_HistoricoProfits
Indizador_Profit_Acum <- which(substr(colnames(Historical_BackTest),1,10) == "ProfitAcum")
Historical_Data <- data.frame(Historical_BackTest$Close.TimeStamp)
colnames(Historical_Data)[1] <- "Close.TimeStamp"
Historical_Data <- cbind(Historical_Data,Historical_BackTest[,Indizador_Profit_Acum])
Mediciones_Trayectoria <- data.frame(matrix(nrow=k, ncol=7, data=0))
Mediciones_Trayectoria[,1] <- colnames(Historical_Data)[2:(k+1)]
colnames(Mediciones_Trayectoria) <- c("Trayectoria","Pips_Fin_Acum","Cta_Max_DD","Cta_Max_Plus",
"Gc_Pc","Trayectoria_DD","Trayectoria_DU")
# -- Criterios a medir para cada trayectoria
# -- Mayor numero de Pips Acumulados al final del periodo.
Mediciones_Trayectoria$Pips_Fin_Acum[1:length(Indizador_Profit_Acum)] <- as.numeric(
apply(X = Historical_Data, 2,
FUN = last)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Minusvalia general de la cuenta.
Mediciones_Trayectoria$Cta_Max_DD[1:length(Indizador_Profit_Acum)]  <- as.numeric(
apply(X = Historical_Data, 2,
FUN = min)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Plusvalia general de la cuenta.
Mediciones_Trayectoria$Cta_Max_Plus[1:length(Indizador_Profit_Acum)] <- as.numeric(
apply(X = Historical_Data, 2,
FUN = max)[2:(length(Indizador_Profit_Acum)+1)])
# -- Mayor Indice GcPc = Ganadoras Consecutivas / Perdedoras Consecutivas
for(i in 1:k) Mediciones_Trayectoria$Gc_Pc[i] <-
round(BackTest$Max_Pos_Consec[i]/BackTest$Max_Neg_Consec[i] ,2)
# -- Menor DrawDown en Pips durante todo el periodo =Indice Pc * StopLoss
for(i in 1:k) Mediciones_Trayectoria$Trayectoria_DD[i] <- BackTest$Max_Neg_Consec[i]*
BackTest$Stop_Loss[i]
# -- Menor DrawUp en Pips durante todo el periodo = Indice Gc * TakeProfit
for(i in 1:k) Mediciones_Trayectoria$Trayectoria_DU[i] <- BackTest$Max_Pos_Consec[i]*
BackTest$Take_Profit[i]
View(Data)
MultPip
abs(Data$Open - Data$Close)*MultPip
View(Data)
Data$CO <- abs(Data$Open - Data$Close)*MultPip
# -- High - Low
Data$HL <- abs(Data$High - Data$Low)*MultPip
# -- Open - Low
Data$OL <- abs(Data$Open - Data$Low)*MultPip
# -- High - Open
Data$HO <- abs(Data$High - Data$Open)*MultPip
# -- Direccion
for(i in 1:length(Data$Open.TimeStamp))
Data$DirCC[i] <- ifelse(Data$Close[i] > Data$Open[i], 1, 0)
ABAcum1 <- function(x) {
rl  <- rle(x)
len <- rl$lengths
v   <- rl$values
cumLen <- cumsum(len)
z <- x
iDrops <- c(2, diff(v)) < 0
z[ cumLen[ iDrops ] ] <- -len[ c(iDrops[-1],FALSE) ]
x*cumsum(z) }
Data$IndVC1 <- as.numeric(ABAcum1(OA_Totales$DirCC))
# -- Bajistas Negativas
ABAcum0 <- function(x) {
x   <- !x
rl  <- rle(x)
len <- rl$lengths
v   <- rl$values
cumLen <- cumsum(len)
z <- x
iDrops <- c(0, diff(v)) < 0
z[ cumLen[ iDrops ] ] <- -len[ c(iDrops[-1],FALSE) ]
x*cumsum(z) }
Data$IndVC0 <- as.numeric(ABAcum0(OA_Totales$DirCC))
Data$HO <- abs(Data$High - Data$Open)*MultPip
# -- Direccion
for(i in 1:length(Data$Open.TimeStamp))
Data$DirCC[i] <- ifelse(Data$Close[i] > Data$Open[i], 1, 0)
# -- Alcistas Positivas
ABAcum1 <- function(x) {
rl  <- rle(x)
len <- rl$lengths
v   <- rl$values
cumLen <- cumsum(len)
z <- x
iDrops <- c(2, diff(v)) < 0
z[ cumLen[ iDrops ] ] <- -len[ c(iDrops[-1],FALSE) ]
x*cumsum(z) }
Data$IndVC1 <- as.numeric(ABAcum1(Data$DirCC))
# -- Bajistas Negativas
ABAcum0 <- function(x) {
x   <- !x
rl  <- rle(x)
len <- rl$lengths
v   <- rl$values
cumLen <- cumsum(len)
z <- x
iDrops <- c(0, diff(v)) < 0
z[ cumLen[ iDrops ] ] <- -len[ c(iDrops[-1],FALSE) ]
x*cumsum(z) }
Data$IndVC0 <- as.numeric(ABAcum0(Data$DirCC))
View(Data)
Grafica0
Data$CO
Historico_Velas <- cbind(Data$Open.TimeStamp, Data$CO, Data$HL, Data$OL, Data$HO)
Historico_Velas <- data.frame(Data$Open.TimeStamp, Data$CO, Data$HL, Data$OL, Data$HO)
Historico_Velas <- melt(Historico_Velas, id.vars = "Close.TimeStamp")
View(Historico_Velas)
Historico_Velas <- melt(Historico_Velas, id.vars = "Data.Close.TimeStamp")
View(Data)
View(Historico_Velas)
Historico_Velas <- melt(Historico_Velas, id.vars = "Data.Open.TimeStamp")
View(Historico_Velas)
p <- ggplot(Historico_Velas, aes(Data.Open.TimeStamp, variable)) + geom_point()
p
p + facet_grid(. ~ variable)
p + facet_grid(variable ~ .)
View(Historico_Velas)
p + facet_grid(value ~ variable)
p + facet_grid(value ~ .)
p
